{
    "openapi": "3.0.0",
    "info": {
        "title": "UOMI API",
        "version": "1.0"
    },
    "paths": {
        "/api": {},
        "/api/expenses": {
            "post": {
                "tags": [
                    "Expenses"
                ],
                "summary": "Create a new expense",
                "description": "This endpoint is used to create a new expense.",
                "operationId": "expenseStore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "group_id": {
                                        "description": "The id of the group",
                                        "type": "integer",
                                        "example": "1",
                                        "nullable": false
                                    },
                                    "payer_id": {
                                        "description": "The id of the payer.",
                                        "type": "integer",
                                        "example": "1",
                                        "nullable": false
                                    },
                                    "name": {
                                        "description": "The name of the expense",
                                        "type": "string",
                                        "maxLength": 255,
                                        "minLength": 1,
                                        "example": "Train ticket",
                                        "nullable": false
                                    },
                                    "price": {
                                        "description": "The price of the expense",
                                        "type": "integer",
                                        "example": "100",
                                        "nullable": false
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Expense created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Expense"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Payer is not in this group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "You are not in this group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/groups/{id}/expenses": {
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Add a expense to a group",
                "description": "This endpoint is used to add a expense to a group.",
                "operationId": "addExpenseToGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the group",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "payer_id": {
                                        "description": "The id of the payer.",
                                        "type": "integer",
                                        "example": "1",
                                        "nullable": false
                                    },
                                    "name": {
                                        "description": "The name of the expense",
                                        "type": "string",
                                        "maxLength": 255,
                                        "minLength": 1,
                                        "example": "Train ticket",
                                        "nullable": false
                                    },
                                    "price": {
                                        "description": "The price of the expense",
                                        "type": "integer",
                                        "example": "100",
                                        "nullable": false
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Expense added to group successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupWithUsersAndExpenses"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad Request - One or more errors with the input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/groups/{id}/users": {
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Add a user to a group",
                "description": "This endpoint is used to add a user to a group.",
                "operationId": "addUserToGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the group",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "description": "The email of the user.",
                                        "type": "string",
                                        "maxLength": 255,
                                        "minLength": 2,
                                        "example": "john.doe@example.com",
                                        "nullable": false
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User added to group successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupWithUsersAndExpenses"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad Request - One or more errors with the input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/groups/{id}": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Get a group",
                "description": "Returns a single group with all its information",
                "operationId": "groupShow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Group id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Group data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupWithUsersAndExpenses"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "You are not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "You are not authorized to view this group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Groups"
                ],
                "summary": "Update a group",
                "description": "This endpoint is used to update a group.",
                "operationId": "groupUpdate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Group id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1",
                            "nullable": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The name of the group",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Europe trip",
                                        "nullable": false
                                    },
                                    "description": {
                                        "description": "The description of the group",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Europe trip description",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Group updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupWithUsersAndExpenses"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "You are not authorized to edit this group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad Request - One or more errors with the input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Groups"
                ],
                "summary": "Delete a group",
                "description": "This endpoint is used to delete a group.",
                "operationId": "destroy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the group",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Group deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Group deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/groups": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Get all groups",
                "description": "Get all groups visible to the authenticated user",
                "operationId": "groupIndex",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "properties": {
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Group"
                                                    },
                                                    "minItems": 0
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Create a new group",
                "description": "This endpoint is used to create a new group.",
                "operationId": "grouStore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The name of the group",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Europe trip",
                                        "nullable": false
                                    },
                                    "description": {
                                        "description": "The description of the group",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Europe trip description",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Group created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupWithUsersAndExpenses"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad Request - One or more errors with the input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/groups/{id}/users/{id}": {
            "delete": {
                "tags": [
                    "Groups"
                ],
                "summary": "Remove a user from a group",
                "description": "This endpoint is used to remove a user from a group.",
                "operationId": "RemoveUserFromGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The first id is the id for the group",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1",
                            "nullable": false
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The second id is the id for the user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1",
                            "nullable": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User remove from group successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupWithUsersAndExpenses"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad Request - One or more errors with the input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/notifications": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Get notifications",
                "description": "Get the oldest 5 notifications visible to the authenticated user, that is, all notifications that have not been read yet. There may be no notifications at all.",
                "operationId": "notificationIndex",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "notifications": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Notification"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register",
                "description": "This endpoint is used to register a new user.",
                "operationId": "6cd4a8afb20be55c12cf820331f54ce4",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "User name",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "John Doe",
                                        "nullable": false
                                    },
                                    "email": {
                                        "description": "User email",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "demo@example.com",
                                        "nullable": false
                                    },
                                    "password": {
                                        "description": "User password",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "password",
                                        "nullable": false
                                    },
                                    "device_name": {
                                        "description": "The name of the device",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "John's iPhone",
                                        "nullable": false
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        {
                                            "properties": {
                                                "token": {
                                                    "type": "string",
                                                    "example": "1|eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad Request - One or more errors with the input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login",
                "description": "This endpoint is used to login a user. <br><br>You have to provide the following informations: <br>Email <br>Password<br>Device Name: This can be a name of the phone, or a browser name<br><br>The endpoint will return an user object, with a token, the token is a bearer token, which must be attached in the header of all request, this token is used to identify the user, in the system.",
                "operationId": "b12e417f73d4e905041e3e87641dca4d",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "description": "User email",
                                        "type": "string",
                                        "example": "demo@example.com",
                                        "nullable": false
                                    },
                                    "password": {
                                        "description": "User password",
                                        "type": "string",
                                        "example": "password",
                                        "nullable": false
                                    },
                                    "device_name": {
                                        "description": "The name of the device",
                                        "type": "string",
                                        "example": "John's iPhone",
                                        "nullable": false
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Group response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        {
                                            "properties": {
                                                "token": {
                                                    "type": "string",
                                                    "example": "1|eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid credentials"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad Request - One or more errors with the input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "BadRequestError": {
                "title": "Bad Request",
                "description": "Bad Request - The request was invalid or cannot be served. The exact error is sent in the message and further ellaborated for each section in the errors datapoint. E.g. „The JSON is not valid“",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "The given data was invalid."
                    },
                    "errors": {
                        "description": "The errors returned when the request is invalid, formatted as an object with the key being the field name and the value being an array of errors.",
                        "type": "object",
                        "example": {
                            "field1": [
                                "The field1 is required.",
                                "The field1 must be at least 10 characters."
                            ],
                            "field2": [
                                "The field2 field is required."
                            ]
                        }
                    }
                },
                "type": "object"
            },
            "UnauthorizedError": {
                "title": "Unauthorized",
                "description": "Unauthorized - Access token is missing or invalid",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Unauthorized - Access token is missing or invalid"
                    }
                },
                "type": "object"
            },
            "ForbiddenError": {
                "title": "Forbidden",
                "description": "Forbidden - You don't have permission to access this resource",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Forbidden"
                    }
                },
                "type": "object"
            },
            "NotFoundError": {
                "title": "Not Found",
                "description": "Not Found - The resource you are looking for was not found",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Not Found"
                    }
                },
                "type": "object"
            },
            "UnprocessableContent": {
                "title": "Unprocessable Content",
                "description": "The request was well-formed but was unable to be followed due to semantic errors.",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Unprocessable Content"
                    }
                },
                "type": "object"
            },
            "Notification": {
                "properties": {
                    "id": {
                        "description": "The id of the notification, formatted as a UUID.",
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "type": {
                        "description": "The type of the notification.",
                        "type": "string",
                        "example": "App\\Notifications\\ExpenseAdded"
                    },
                    "notifiable_type": {
                        "description": "The type of the notifiable model.",
                        "type": "string",
                        "example": "App\\Models\\User"
                    },
                    "notifiable_id": {
                        "description": "The id of the notifiable model. This would usually be the id of the authenticated user.",
                        "type": "integer",
                        "example": "1"
                    },
                    "data": {
                        "description": "The data of the notification. This data is dynamic according to the type of the notification.",
                        "type": "object",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ExpenseAddedNotification"
                            },
                            {
                                "$ref": "#/components/schemas/AddedToGroupNotification"
                            },
                            {
                                "$ref": "#/components/schemas/RemovedFromGroupNotification"
                            }
                        ]
                    },
                    "read_at": {
                        "description": "The date and time when the notification was read.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-01-01 00:00:00"
                    },
                    "created_at": {
                        "description": "The date and time when the notification was created.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-01-01 00:00:00"
                    },
                    "updated_at": {
                        "description": "The date and time when the notification was updated.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-01-01 00:00:00"
                    }
                },
                "type": "object"
            },
            "Expense": {
                "title": "Expense schema",
                "properties": {
                    "id": {
                        "description": "Expense id",
                        "type": "integer",
                        "example": "1"
                    },
                    "group_id": {
                        "description": "Group id",
                        "type": "integer",
                        "example": "1"
                    },
                    "payer_id": {
                        "description": "Payer id",
                        "type": "integer",
                        "example": "1"
                    },
                    "created_by": {
                        "description": "Creator id",
                        "type": "integer",
                        "example": "1"
                    },
                    "name": {
                        "description": "Expense name",
                        "type": "string",
                        "example": "Pizza"
                    },
                    "price": {
                        "description": "Expense price",
                        "type": "integer",
                        "example": "100"
                    },
                    "updated_at": {
                        "description": "Date and time of last update",
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-01-01 00:00:00"
                    },
                    "created_at": {
                        "description": "Date and time of creation",
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-01-01 00:00:00"
                    }
                },
                "type": "object"
            },
            "Group": {
                "title": "Group schema",
                "properties": {
                    "id": {
                        "description": "Group id",
                        "type": "integer",
                        "example": "1"
                    },
                    "name": {
                        "description": "Group name",
                        "type": "string",
                        "example": "Group 1"
                    },
                    "description": {
                        "description": "short description of the group",
                        "type": "string",
                        "example": "Group 1 description"
                    },
                    "created_at": {
                        "description": "Date and time of creation",
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-01-01 00:00:00"
                    },
                    "updated_at": {
                        "description": "Date and time of last update",
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-01-01 00:00:00"
                    }
                },
                "type": "object"
            },
            "GroupWithUsersAndExpenses": {
                "title": "Group with users and expenses schema",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Group"
                    },
                    {
                        "properties": {
                            "users": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "minItems": 0
                            },
                            "expenses": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Expense"
                                },
                                "minItems": 0
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "User": {
                "title": "User schema",
                "properties": {
                    "id": {
                        "description": "User id",
                        "type": "integer",
                        "example": 1,
                        "nullable": false
                    },
                    "name": {
                        "description": "User name",
                        "type": "string",
                        "example": "John Doe",
                        "nullable": false
                    },
                    "email": {
                        "description": "User email",
                        "type": "string",
                        "example": "demo@example.com",
                        "nullable": false
                    },
                    "email_verified_at": {
                        "description": "User email verified at",
                        "type": "string",
                        "default": null,
                        "example": "2021-01-01 00:00:00",
                        "nullable": true
                    },
                    "created_at": {
                        "description": "User created at",
                        "type": "string",
                        "example": "2021-01-01 00:00:00",
                        "nullable": false
                    },
                    "updated_at": {
                        "description": "User updated at",
                        "type": "string",
                        "example": "2021-01-01 00:00:00",
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "AddedToGroupNotification": {
                "title": "Added to group notification (App\\\\Notifications\\\\AddedToGroup)",
                "properties": {
                    "group": {
                        "$ref": "#/components/schemas/Group"
                    },
                    "added_by": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object"
            },
            "ExpenseAddedNotification": {
                "title": "Expense added notification (App\\\\Notifications\\\\ExpenseAdded)",
                "properties": {
                    "expense": {
                        "$ref": "#/components/schemas/Expense"
                    },
                    "group": {
                        "$ref": "#/components/schemas/Group"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/User"
                    },
                    "payer": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object"
            },
            "RemovedFromGroupNotification": {
                "title": "Removed from group notification (App\\\\Notifications\\\\RemovedFromGroup)",
                "properties": {
                    "group": {
                        "$ref": "#/components/schemas/Group"
                    },
                    "removed_by": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    }
}